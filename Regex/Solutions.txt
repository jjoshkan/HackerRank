Matching Specific Strings
	Regex_Pattern = r'(hackerrank)'

Matching Anything But a Newline
	regex_pattern = r"^...\....\....\....$"

Matching Digits & Non-Digit Characters
	Regex_Pattern = r"\d{2}\D\d{2}\D\d{4}"

Matching Whitespace & Non-Whitespace Character
	Regex_Pattern = r"\S{2}\s\S{2}\s\S{2}"

Matching Word & Non-Word Character
	Regex_Pattern = r"\w{3}\W\w*\W\w{3}"

Matching Start & End
	Regex_Pattern = r"^\d\w{4}\.$"

Matching Specific Characters
	Regex_Pattern = r'^[123][120][xs0][30Aa][xsu][\.,]$'

Excluding Specific Characters
	Regex_Pattern = r'^[^0-9][^aeuou][^bcdf][^\r\n\t\f\s][^AEUOU][^\.,]$'

Matching Character Ranges
	Regex_Pattern = r'^[a-z][1-9][^a-z][^A-Z][A-Z]'

Matching {x} Repetitions
	Regex_Pattern = r'^[a-zA-Z02468]{40}[13579\s]{5}$'

Matching {x, y} Repetitions
	Regex_Pattern = r'^[0-9]{1,2}[a-zA-Z]{3,}[\.]{0,3}$'

Matching Zero Or More Repetitions
	Regex_Pattern = r'^[0-9]{2,}[a-z}*[A-Z]*$'

Matching One Or More Repetitions
	Regex_Pattern = r'^[0-9]+[A-Z]+[a-z]+$'

Matching Ending Items
	Regex_Pattern = r'^[a-zA-Z]*[s]$'

Matching Word Boundaries
	Regex_Pattern = r'\b[aeiouAEIOU][a-zA-Z]*\b'

Capturing & Non-Capturing Groups
	Regex_Pattern = r'(ok){3}'

Alternative Matching
	Regex_Pattern = r'^(Mr\.|Mrs\.|Ms\.|Dr\.|Er\.)[a-zA-Z]+$'

Matching Same Text Again & Again
	Regex_Pattern = r'([a-z])(\w)(\s)(\W)(\d)(\D)([A-Z])([a-zA-Z])([aeiouAEIOU])(\S)\1\2\3\4\5\6\7\8\9\10'

Backreferences To Failed Groups
	Regex_Pattern = r"^\d{2}(-?)\d{2}\1\d{2}\1\d{2}$"

Branch Reset Groups
	Regex_Pattern = '/^\d{2}(---|\.|-|:)\d{2}\1\d{2}\1\d{2}$/'

Positive Lookahead
	Regex_Pattern = r'o(?=oo)'

Negative Lookahead
	Regex_Pattern = r"(.)(?!\1)"

Positive Lookbehind
	Regex_Pattern = r"(?<=[13579]\d)"

Negative Lookbehind
	Regex_Pattern = r"(?<![aeiouAEIOU])."

Utopian Identification Number
	regex_pattern = '^[a-z]{0,3}[0-9]{2,8}[A-Z]{3,}'